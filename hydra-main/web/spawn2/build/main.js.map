{"version":3,"sources":["webpack:///webpack/bootstrap 2b9614f3eef33e2b951d","webpack:///./src/js/main.js"],"names":[],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAQ,oBAAoB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAU,qBAAqB;AAC/B;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;;AAET;AACA,yDAAwD;AACxD;AACA,qCAAoC,aAAa;AACjD,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,mCAAkC,wBAAwcAAa;AACb;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAoD;AACpD;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA2D;AAC3D;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAuD;AACvD;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAqD;AACrD;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAqD;AACrD;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,4DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA,6DAA4D;AAC5D,+BAA8B,WAAW;AACzC;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA4D;AAC5D;AACA;AACA,yEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAuD;AACvD;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,wDAAuD;AACvD;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAuD;AACvD;AACA;AACA;AACA;AACA,mDAAkD;AAClD;AACA,cAAa;AACb;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,uEAAsE,aAAa;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C;AAC1C,2CAA0C,wBAAwB;AAClE;AACA;AACA;AACA,uDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA0D;AAC1D;AACA;AACA;AACA;AACA,iCAAgC;AAChC;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,uCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA,MAAK;AACL;AACA;AACA,yDAAwD;AACxD;AACA;AACA;AACA;AACA,UAAS;AACT;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA,MAAK;AACL;AACA,8CAA6C,cAAc;AAC3D,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT,MAAK;AACL;AACA;AACA;AACA,uCAAsC;AACtC,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,2CAA0C;AAC1C,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,MAAK;AACL;AACA,sCAAqC,cAAc,E;AACnD;AACA;AACA;AACA;AACA;AACA,sB;AACA,MAAK;AACL;AACA;AACA;AACA,sCAAqC,eAAe;AACpD,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,MAAK,E;AACL;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA,UAAS;AACT,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAiD,aAAa;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA,UAAS;AACT,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,E,6CAAC","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tvar parentJsonpFunction = window[\"webpackJsonp\"];\n \twindow[\"webpackJsonp\"] = function webpackJsonpCallback(chunkIds, moreModules) {\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, callbacks = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId])\n \t\t\t\tcallbacks.push.apply(callbacks, installedChunks[chunkId]);\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);\n \t\twhile(callbacks.length)\n \t\t\tcallbacks.shift().call(null, __webpack_require__);\n\n \t};\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// \"0\" means \"already loaded\"\n \t// Array means \"loading\", array contains callbacks\n \tvar installedChunks = {\n \t\t0:0\n \t};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId, callback) {\n \t\t// \"0\" is the signal for \"already loaded\"\n \t\tif(installedChunks[chunkId] === 0)\n \t\t\treturn callback.call(null, __webpack_require__);\n\n \t\t// an array means \"currently loading\".\n \t\tif(installedChunks[chunkId] !== undefined) {\n \t\t\tinstalledChunks[chunkId].push(callback);\n \t\t} else {\n \t\t\t// start chunk loading\n \t\t\tinstalledChunks[chunkId] = [callback];\n \t\t\tvar head = document.getElementsByTagName('head')[0];\n \t\t\tvar script = document.createElement('script');\n \t\t\tscript.type = 'text/javascript';\n \t\t\tscript.charset = 'utf-8';\n \t\t\tscript.async = true;\n\n \t\t\tscript.src = __webpack_require__.p + \"\" + chunkId + \".main.js\";\n \t\t\thead.appendChild(script);\n \t\t}\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/spawn2/build/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 2b9614f3eef33e2b951d\n **/","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nrequire([\n    \"oboe\",\n    \"app\",\n    \"alertify\",\n    \"jscookie\",\n    \"router\",\n    \"jobs\",\n    \"macro\",\n    \"alias\",\n    \"alerts\",\n    \"command\",\n    \"host\",\n    \"layout.views\",\n    \"task\",\n    \"task.log\",\n    \"graph\",\n    \"git\",\n    \"alerts\",\n    \"settings\",\n    \"datatable\",\n    \"domReady\",\n    \"backbone\",\n    \"underscore\",\n    \"jquery\",\n    \"bootstrap\",\n    \"date\"\n],\nfunction(\n    oboe,\n    app,\n    alertify,\n    Cookies,\n    Router,\n    Jobs,\n    Macro,\n    Alias,\n    Alert,\n    Command,\n    Host,\n    Layout,\n    Task,\n    TaskLog,\n    Graph,\n    Git,\n    Alerts,\n    Settings,\n    DataTable,\n    domReady,\n    Backbone,\n    _,\n    $\n){\n    alertify.defaults.glossary.title=\"\";\n    alertify.defaults.transition = \"slide\";\n    alertify.defaults.theme.ok = \"btn btn-primary\";\n    alertify.defaults.theme.cancel = \"btn btn-danger\";\n    alertify.defaults.theme.input = \"form-control\";\n    alertify.minimalDialog || alertify.dialog('minimalDialog',function(){\n        return {\n            main:function(content){\n                this.setContent(content);\n            }\n        };\n    });\n    $('#loginForm').on('submit', app.authenticate);\n    $('#loginButton').on('click', app.login);\n    $('#sudoCheckbox').on('click', app.sudo);\n    $('#logoutButton').on('click', app.logout);\n\n    app.jobCollection = new Jobs.Collection([]);\n    app.hostCollection = new Host.Collection([]);\n    app.alertCollection = new Alert.Collection([]);\n    app.commandCollection = new Command.Collection([]);\n    app.macroCollection = new Macro.Collection([]);\n    app.aliasCollection = new Alias.Collection([]);\n\n    oboe({url: '/update/setup'})\n        .node('quiesce', function (quiesce) {\n            app.isQuiesced = quiesce;\n            app.checkQuiesced();\n        })\n        .node('queryHost', function (queryHost) {\n            app.queryHost = queryHost;\n        })\n        .node('jobs[*]', function (job) {\n            app.jobCollection.add(job);\n        })\n        .node('hosts[*]', function (host) {\n            app.hostCollection.add(host);\n        })\n        .node('alerts[*]', function (alert) {\n            app.alertCollection.add(alert);\n        })\n        .node('commands[*]', function (command) {\n            app.commandCollection.add(command);\n        })\n        .node('macros[*]', function (macro) {\n            app.macroCollection.add(macro);\n        })\n        .node('aliases[*]', function (alias) {\n            app.aliasCollection.add(alias);\n        });\n\n    app.server.connect();\n    app.jobInfoMetricModel = new Jobs.InfoMetricModel({});\n    app.router.on(\"route:showIndex\",function(){\n        app.router.navigate(\"jobs\",{trigger:true});\n    });\n    app.router.on(\"route:showJobsTable\",function(){\n        app.trigger(\"loadJobTable\");\n        app.showView(app.jobTable,\"#jobs\",[\"configModel\",\"parameterCollection\",\"job\"])\n        app.makeHtmlTitle(\"Jobs\");\n    });\n    app.router.on(\"route:showJobCompactTable\",function(){\n        app.trigger(\"loadJobCompactTable\");\n        app.showView(app.jobTable,\"#jobs\",[\"configModel\",\"parameterCollection\",\"job\"]);\n        app.makeHtmlTitle(\"Jobs\");\n        //app.jobTable.resize();\n    });\n    app.router.on(\"route:showJobComfyTable\",function(){\n        app.trigger(\"loadJobComftTable\");\n        app.showView(app.jobTable,\"#jobs\",[\"configModel\",\"parameterCollection\",\"job\"]);\n        app.makeHtmlTitle(\"Jobs\");\n        //app.jobTable.resize();\n    });\n    app.router.on(\"route:showQuickTask\",function(jobId){\n        app.trigger(\"loadJobTable\");\n        app.job = app.jobCollection.get(jobId);\n        var taskCollection = new Task.Collection();\n        taskCollection.jobUuid=jobId;\n        var taskTable = new Task.TableView({\n            id:\"taskTable\"+jobId,\n            collection:taskCollection\n        });\n        var dividerView = new Jobs.TaskDividerView({\n            model:app.job\n        });\n        var layout = new Layout.HorizontalDividedSplit({\n            topView:app.jobTable,\n            bottomView:taskTable,\n            dividerView:dividerView,\n            topHeight:48,\n            bottomHeight:48,\n            dividerHeight:4\n        });\n        app.showView(layout,\"#jobs\");\n        taskCollection.fetch({\n            reset:true\n        });\n        app.makeHtmlTitle(\"Quick::\"+jobId);\n    });\n    app.router.on(\"route:showQuickTaskDetail\",function(jobId,node){\n        app.trigger(\"loadJobTable\");\n        app.job = app.jobCollection.get(jobId);\n        var taskCollection = new Task.Collection();\n        taskCollection.jobUuid=jobId;\n        taskCollection.fetch({\n            reset:true\n        });\n        var task= new Task.Model({node:node,jobUuid:jobId});\n        var log = new TaskLog.Model({\n            jobUuid:jobId,\n            node:node\n        });\n        var detail = new Task.DetailView({\n            model:task,\n            log:log\n        });\n        task.fetch({\n            success:function(){\n                task.trigger(\"reset\");\n            }\n        });\n        var taskTable = new Task.TinyTableView({\n            id:\"taskTable\"+jobId,\n            collection:taskCollection,\n            model:task,\n            nodeNumber:node,\n            enableSearch:false\n        });\n        var bottomView = new Layout.VerticalSplit({\n            rightView:detail,\n            leftView:taskTable,\n            rightWidth:80,\n            leftWidth:20\n        });\n        var dividerView = new Jobs.TaskDetailDividerView({\n            model:app.job,\n            collection: taskCollection,\n            nodeNumber:node\n        });\n        var layout = new Layout.HorizontalDividedSplit({\n            topView:app.jobTable,\n            bottomView:bottomView,\n            dividerView:dividerView,\n            topHeight:48,\n            bottomHeight:48,\n            dividerHeight:4\n        });\n        app.showView(layout,\"#jobs\");\n        app.makeHtmlTitle(\"Job::\"+jobId);\n    });\n    app.router.on(\"route:showHostTable\",function(){\n        var table = new Host.TableView({\n            id:\"hostTable\",\n            collection:app.hostCollection\n        });\n        app.showView(table,\"#hosts\");\n        app.makeHtmlTitle(\"Hosts\");\n    });\n    app.router.on(\"route:showMacroTable\",function(){\n        app.macroCollection.fetch();\n        var table = new Macro.TableView({\n            id:\"macroTable\",\n            collection:app.macroCollection\n        });\n        app.showView(table,\"#macros\");\n        app.makeHtmlTitle(\"Macros\");\n    });\n    app.router.on(\"route:showCommandTable\",function(){\n        app.commandCollection.fetch();\n        var table = new Command.TableView({\n            id:\"commandTable\",\n            collection:app.commandCollection\n        });\n        app.showView(table,\"#commands\");\n        app.makeHtmlTitle(\"Commands\");\n    });\n    app.router.on(\"route:showAliasTable\",function(){\n        app.aliasCollection.fetch();\n        var table = new Alias.TableView({\n            id:\"aliasTable\",\n            collection:app.aliasCollection\n        });\n        app.showView(table,\"#alias\");\n        app.makeHtmlTitle(\"Alias\");\n    });\n    app.router.on(\"route:showJobConf\",function(jobId){\n        app.trigger(\"loadJob\",jobId);\n        if(!_.isUndefined(app.job)){\n            var view = new Jobs.ConfDetailView({\n                model:app.job,\n                configModel:app.configModel,\n                parameterCollection:app.parameterCollection,\n                commandCollection:app.commandCollection\n            });\n            app.commandCollection.fetch();\n            app.showView(view,\"#jobs\");\n        }\n    });\n    app.router.on(\"route:showJobConfClone\",function(jobId){\n        app.trigger(\"cloneJob\",jobId);\n        if(!_.isUndefined(app.job)){\n            var view = new Jobs.ConfDetailView({\n                                                   model:app.job,\n                                                   isClone:true,\n                                                   configModel:app.configModel,\n                                                   parameterCollection:app.parameterCollection,\n                                                   commandCollection:app.commandCollection\n                                                   });\n            app.commandCollection.fetch();\n            app.showView(view,\"#jobs\");\n        }\n    });\n    app.router.on(\"route:showJobSettings\",function(jobId){\n        app.trigger(\"loadJob\",jobId);\n        if(!_.isUndefined(app.job)){\n            var view = new Jobs.SettingDetailView({\n                                                          model:app.job,\n                                                          configModel:app.configModel,\n                                                          parameterCollection:app.parameterCollection\n                                                          });\n            app.showView(view,\"#jobs\");\n        }\n    });\n    app.router.on(\"route:showJobSettingsClone\",function(jobId){\n        app.trigger(\"cloneJob\",jobId);\n        if(!_.isUndefined(app.job)){\n            var view = new Jobs.SettingDetailView({\n                                                      model:app.job,\n                                                      isClone:true,\n                                                      configModel:app.configModel,\n                                                      parameterCollection:app.parameterCollection\n                                                      });\n            app.showView(view,\"#jobs\");\n        }\n    });\n    app.router.on(\"route:showJobAlerts\",function(jobId){\n        app.trigger(\"loadJob\",jobId);\n        if(!_.isUndefined(app.job)){\n            var view = new Jobs.AlertDetailView({\n                                                    model:app.job,\n                                                    configModel:app.configModel,\n                                                    parameterCollection:app.parameterCollection\n                                                    });\n            app.showView(view,\"#jobs\");\n        }\n    });\n    app.router.on(\"route:showJobAlertsClone\",function(jobId){\n        app.trigger(\"cloneJob\",jobId);\n        if(!_.isUndefined(app.job)){\n            var view = new Jobs.AlertDetailView({\n                                                    model:app.job,\n                                                    isClone:true,\n                                                    configModel:app.configModel,\n                                                    parameterCollection:app.parameterCollection\n                                                    });\n            app.showView(view,\"#jobs\");\n        }\n    });\n    app.router.on(\"route:showJobDeps\",function(jobId){\n        app.trigger(\"loadJob\",jobId);\n        if(!_.isUndefined(app.job)){\n            var graphModel = new Graph.TreeGraphModel({\n                                                          jobId: jobId\n                                                          });\n            var view = new Jobs.DependenciesDetailView({\n                                                           model:app.job,\n                                                           configModel:app.configModel,\n                                                           parameterCollection:app.parameterCollection,\n                                                           graphModel:graphModel\n                                                           });\n            graphModel.fetch({reset:true});\n            app.showView(view,\"#jobs\");\n        }\n    });\n    app.router.on(\"route:showJobExpConf\",function(jobId){\n        app.trigger(\"loadJob\",jobId);\n        if(!_.isUndefined(app.job)){\n            var expandModel = new Jobs.ExpandedConfigModel();\n            if(!app.job.isNew()){\n                                    expandModel.set(\"id\",app.job.id);\n                                    }\n            expandModel.set(\"config\",app.configModel.get(\"config\"));\n            var view = new Jobs.ExpandedConfDetailView({\n                                                           model:app.job,\n                                                           configModel:app.configModel,\n                                                           parameterCollection:app.parameterCollection,\n                                                           expandModel:expandModel\n                                                           });\n            _.each(app.parameterCollection.toJSON(),function(param){\n                                                                       expandModel.set(\"sp_\"+param.name,param.value);\n                                                                       });\n            expandModel.fetch();\n            if(app.parameterCollection.length===0){\n                                                      app.parameterCollection.fetch();\n                                                      }\n            app.showView(view,\"#jobs\");\n        }\n    });\n    app.router.on(\"route:showJobHistory\",function(jobId){\n        app.trigger(\"loadJob\",jobId);\n        if(!_.isUndefined(app.job)){\n            var history = new Jobs.HistoryCollection();\n            history.jobUuid=jobId;\n            var view = new Jobs.HistoryDetailView({\n                                                      model:app.job,\n                                                      configModel:app.configModel,\n                                                      parameterCollection:app.parameterCollection,\n                                                      historyCollection:history\n                                                      });\n            app.showView(view,\"#jobs\");\n            history.fetch();\n        }\n    });\n    app.router.on(\"route:showJobHistoryView\",function(jobId,commit){\n        app.trigger(\"loadJob\",jobId);\n        if(!_.isUndefined(app.job)){\n            var history = new Jobs.HistoryCollection();\n            history.jobUuid=jobId;\n            var commit = new Jobs.HistoryModel({\n                                                   jobUuid:jobId,\n                                                   commit:commit\n                                                   });\n            var view = new Jobs.HistoryCommitView({\n                                                      model:app.job,\n                                                      configModel:app.configModel,\n                                                      parameterCollection:app.parameterCollection,\n                                                      historyCollection:history,\n                                                      commitModel:commit\n                                                      });\n            app.showView(view,\"#jobs\");\n            history.fetch();\n            commit.load().done(function(data){\n                commit.set(\"historyConfig\",data);\n            }).fail(function(xhr){\n                alertify.error(\"Error loading commit: \"+xhr.responseText);\n            });\n        }\n    });\n    app.router.on(\"route:showJobHistoryDiff\",function(jobId,commit){\n        app.trigger(\"loadJob\",jobId);\n        if(!_.isUndefined(app.job)){\n            var history = new Jobs.HistoryCollection();\n            history.jobUuid=jobId;\n            var commit = new Jobs.HistoryModel({\n                                                   jobUuid:jobId,\n                                                   commit:commit\n                                                   });\n            var view = new Jobs.HistoryCommitView({\n                                                      model:app.job,\n                                                      configModel:app.configModel,\n                                                      parameterCollection:app.parameterCollection,\n                                                      historyCollection:history,\n                                                      commitModel:commit,\n                                                      editorAttribute:\"diff\"\n                                                      });\n            app.showView(view,\"#jobs\");\n            history.fetch();\n            commit.diff().done(function(data){\n                                                 commit.set(\"diff\",data);\n                                                 }).fail(function(xhr){\n                alertify.error(\"Error loading diff: \"+xhr.responseText);\n            });\n        }\n    });\n    app.router.on(\"route:showJobTaskDetail\",function(jobId,node){\n        app.trigger(\"loadJob\",jobId);\n        if(!_.isUndefined(app.job)){\n            if(_.isUndefined(app.job)){\n                                          app.router.navigate(\"jobs\",{trigger:true});\n                                          }\n            else if(parseInt(node)>=app.job.get(\"nodes\")){\n                                                             app.router.navigate(\"jobs/\"+jobId+\"/tasks\");\n                                                             }\n            else{\n                var taskCollection = new Task.Collection();\n                taskCollection.jobUuid=jobId;\n                taskCollection.fetch({\n                                         reset:true\n                                         });\n                var task= new Task.Model({node:node,jobUuid:jobId});\n                var logModel = new TaskLog.Model({\n                                                     jobUuid:jobId,\n                                                     node:node\n                                                     });\n                var detail = new Jobs.TaskDetailView({\n                                                         model:app.job,\n                                                         configModel:app.configModel,\n                                                         parameterCollection:app.parameterCollection,\n                                                         taskModel:task,\n                                                         logModel:logModel,\n                                                         taskCollection:taskCollection\n                                                         });\n                task.fetch({\n                               success:function(){\n                               task.trigger(\"reset\");\n                               }\n                               });\n                app.showView(detail,\"#jobs\");\n            }\n        }\n    });\n    app.router.on(\"route:showMacroDetail\",function(name){\n        var macro;\n        if(_.isEqual(name,\"create\")){\n            macro = new Macro.Model({});\n            app.makeHtmlTitle(\"New Macro\");\n        }\n        else{\n            macro = app.macroCollection.get(name).clone();\n            macro.fetch();\n            app.makeHtmlTitle(\"Macro::\"+name);\n        }\n        var view = new Macro.DetailView({\n            model:macro\n        });\n        app.showView(view,\"#macros\");\n    });\n    app.router.on(\"showCheckDirs\",function(jobId){\n        app.trigger(\"loadJob\",jobId);\n        var collection = new Jobs.CheckDirsCollection({});\n        collection.jobUuid=jobId;\n        new Jobs.CheckDirsModal({\n            collection:collection,\n            model:app.job\n        }).render();\n        collection.fetch();\n    });\n    app.router.on(\"route:showJobBackups\",function(jobId,node){\n        app.trigger(\"loadJob\",jobId);\n        var backupModel = new Jobs.BackupModel({\n            jobUuid:jobId,\n            node:(!_.isUndefined(node)?node:-1)\n        });\n        new Jobs.BackupModalView({\n            model:app.job,\n            backupModel:backupModel\n        }).render();\n        backupModel.fetch();\n    });\n    app.router.on(\"route:showChangePermissions\",function(jobIds){\n        new Jobs.ChangePermissionsModalView({jobIds:jobIds}).render();\n    });\n    app.router.on(\"route:showJobTaskTable\",function(jobId){\n        app.trigger(\"loadJob\",jobId);\n        var taskCollection = new Task.Collection();\n        taskCollection.jobUuid=jobId;\n        var view = new Jobs.TaskTableView({\n            id:\"taskTable\"+jobId,\n            model:app.job,\n            configModel:app.configModel,\n            parameterCollection:app.parameterCollection,\n            taskCollection:taskCollection\n        });\n        app.showView(view,\"#jobs\");\n        taskCollection.fetch({\n            reset:true\n        });\n    });\n    app.router.on(\"route:showAliasDetail\",function(name){\n        var alias;\n        if(_.isEqual(name,\"create\")){\n            alias = new Alias.Model({});\n        }else{\n            alias = app.aliasCollection.get(name);\n        }\n        var view = new Alias.DetailView({\n            model:alias\n        });\n        app.showView(view,\"#alias\");\n        app.makeHtmlTitle(\"Alias::\"+name);\n    });\n    app.router.on(\"route:showCommandDetail\",function(name){\n        var command;\n        if(_.isEqual(name,\"create\")){\n            command = new Command.Model({});\n        }else{\n            command = app.commandCollection.get(name);\n        }\n        var view = new Command.DetailView({\n            model:command\n        });\n        app.showView(view,\"#commands\");\n        app.makeHtmlTitle(\"Command::\"+name);\n    });\n    app.router.on(\"route:showHostTaskDetail\",function(name){\n        var host = app.hostCollection.get(name);\n        var tasks = new Task.Collection();\n        _.each(_.flatten([\n            host.get('running'),\n            host.get('queued'),\n            host.get('backingup'),\n            host.get('replicating')\n        ]),function(taskData){\n            var task = new Task.Model(\n                Task.Model.prototype.parse({\n                    jobUuid:taskData.jobUuid,\n                    node: \"\"+taskData.nodeNumber,\n                    hostUuid:name\n                })\n            );\n            tasks.add(task);\n            task.fetch();\n        });\n        var view = new Host.TaskDetailView({\n            model:host,\n            collection:tasks\n        });\n        app.showView(view,\"#hosts\");\n        app.makeHtmlTitle(\"Host::\"+name);\n    });\n    app.router.on(\"route:showRebalanceParams\",function(){\n        var model = new Settings.RebalanceModel();\n        var view = new Settings.RebalanceView({\n            model:model\n        });\n        model.fetch();\n        app.showView(view,\"#rebalanceParams\");\n        app.makeHtmlTitle(\"Rebalance Params\");\n    });\n    app.router.on(\"route:showGitProperties\",function(){\n        var model = new Git.Model();\n        var view = new Git.PropertiesView({\n            model:model\n        });\n        model.fetch();\n        app.showView(view,\"#git\");\n        app.makeHtmlTitle(\"Git\");\n    });\n    app.router.on(\"route:showAlertsTable\",function(){\n        var table = new Alerts.TableView({\n            id:\"alertTable\",\n            collection:app.alertCollection\n        });\n        app.showView(table,\"#alerts\");\n        app.makeHtmlTitle(\"Alerts\");\n    });\n    app.router.on(\"route:showAlertsTableFiltered\",function(jobIdFilter) {\n    \tapp.router.navigate(\"#alerts\", {trigger: true});    \t    \t\n\t\t// Modify the table filter and apply it to the alert list.\n\t\tvar inp = $(\"#alertTable_filter\").find(\"input\");\n\t\tinp.val(jobIdFilter);\n\t\tvar event = $.Event(\"keypress\");\n\t\tevent.which = 13;\n\t\tinp.trigger(event);    \t\n    });\n    app.router.on(\"route:showAlertsDetail\",function(alertId, jobIds){\n        var alert;\n        if(_.isEqual(alertId,\"create\")){\n            alert = new Alert.Model({jobIds: jobIds});\n        }else{\n            alert = app.alertCollection.get(alertId);\n        }\n        var view = new Alerts.DetailView({\n            model:alert\n        });\n        app.showView(view,\"#alerts\");\n        app.makeHtmlTitle(\"Alert::\"+name);\n    });    \n    app.user.on(\"change:username\",function(){\n        $(\"#usernameBox\").html(app.user.get(\"username\"));\n    });\n    app.on('loadJobTable',function(){\n        var state = Cookies.getJSON(\"spawn\");\n        if(!_.isUndefined(state) && state.jobCompact){\n            app.trigger(\"loadJobCompactTable\");\n        }\n        else{\n            app.trigger(\"loadJobComftTable\");\n        }\n    });\n    app.on('loadJobCompactTable',function(){\n        if(_.isUndefined(app.jobTable) || !_.isEqual(app.jobTable.id,'compactJobTable')){\n            var state = Cookies.getJSON(\"spawn\") || {};\n            state.jobCompact=true;\n            Cookies.set(\"spawn\", state);\n            app.jobTable = new Jobs.CompactTable({\n                id:\"compactJobTable\",\n                collection:app.jobCollection\n            });\n        }\n    });\n    app.on('loadJobComftTable',function(){\n        if(_.isUndefined(app.jobTable) || !_.isEqual(app.jobTable.id,'comfyJobTable')){\n            var state = Cookies.getJSON(\"spawn\") || {};\n            state.jobCompact=false;\n            Cookies.set(\"spawn\", state);\n            app.jobTable= new Jobs.ComfyTableView({\n                id:\"comfyJobTable\",\n                collection:app.jobCollection\n            });\n        }\n    });\n    app.on(\"loadCommit\",function(jobId,commit){\n        app.trigger(\"loadJob\",jobId);\n        var commit = new Jobs.HistoryModel({\n            jobUuid:jobId,\n            commit:commit\n        }).load().done(function(data){\n            app.configModel.set(\"config\",data);\n        }).fail(function(data){\n            alertify.error(\"Error loading commit \"+commit);\n        });\n    });\n    app.on(\"loadJob\",function(jobId){\n        if(_.isEqual(jobId,\"create\")){\n            if(_.isUndefined(app.job) || !app.job.isNew()){\n                app.job = new Jobs.Model();\n                app.job.unset(\"id\");\n                app.configModel = new Jobs.ConfigModel();\n                app.parameterCollection = new Jobs.ParameterCollection();\n            }\n            app.makeHtmlTitle(\"New::Job\");\n        }\n        else{\n            if(_.isUndefined(app.job) || !_.isEqual(app.job.id,jobId) || !_.isEmpty(app.cloneId)){\n                var job = app.jobCollection.get(jobId);\n                if(_.isUndefined(job)){\n                    alertify.error(\"Job \"+jobId+\" not found.\");\n                    app.router.navigate(\"#jobs\",{trigger:true});\n                    return;\n                }\n                app.job=job;\n                app.job.isClone=false;\n                app.job.cloneId=\"\";\n                app.job.fetch();\n            }\n            if(_.isUndefined(app.configModel) || !_.isEqual(app.configModel.get(\"jobUuid\"),jobId)){\n                app.configModel = new Jobs.ConfigModel({\n                    jobUuid:jobId\n                });\n                app.configModel.fetch();\n            }\n            if(_.isUndefined(app.parameterCollection) || !_.isEqual(app.parameterCollection.jobUuid,jobId)){\n                app.parameterCollection = new Jobs.ParameterCollection();\n                app.parameterCollection.jobUuid=jobId;\n                app.parameterCollection.fetch();\n            }\n            app.makeHtmlTitle(\"Job::\"+jobId);\n        }\n    });\n    app.on(\"cloneJob\",function(jobId){\n        if(_.isUndefined(app.job) || !_.isEqual(app.job.cloneId,jobId)){\n            var data= app.jobCollection.get(jobId).pick([\n                \"backups\",\n                'command',\n                'dailyBackups',\n                'description',\n                'dontCloneMe',\n                'dontAutoBalanceMe',\n                'hourlyBackups',\n                'maxRunTime',\n                'maxSimulRunning',\n                'minionType',\n                'monthlyBackups',\n                'nodes',\n                'parameters',\n                'priority',\n                'qc_canQuery',\n                'qc_consecutiveFailureThreshold',\n                'qc_queryTraceLevel',\n                'queryConfig',\n                'readOnlyReplicas',\n                'rekickTimeout',\n                'replicas',\n                'replicationFactor',\n                'weeklyBackups',\n                'autoRetry'\n            ]);\n            data.description = \"CLONE \"+data.description;\n            app.job = new Jobs.Model(data);\n            app.job.cloneId=jobId;\n        }\n        if(_.isUndefined(app.configModel) || !_.isEqual(app.configModel.get(\"jobUuid\"),jobId)){\n            app.configModel = new Jobs.ConfigModel({\n                jobUuid:jobId\n            });\n            app.configModel.fetch();\n        }\n        if(_.isUndefined(app.parameterCollection) || !_.isEqual(app.parameterCollection.jobUuid,jobId)){\n            app.parameterCollection = new Jobs.ParameterCollection();\n            app.parameterCollection.jobUuid=jobId;\n            app.parameterCollection.fetch();\n        }\n        app.makeHtmlTitle(\"Clone::\"+jobId);\n    });\n    app.initialize();\n    domReady(function(){\n        Backbone.history.start();\n        $(\"#healthCheckLink\").click(function(event){\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            app.healthCheck();\n            $(event.target).parents(\".open\").find(\"[data-toggle=dropdown]\").dropdown(\"toggle\");\n        });\n        $(\"#quiesceLink\").click(function(event){\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            app.quiesce();\n        });\n        \n        new Jobs.InfoMetricView({\n            el:\"div#infoMetricBox\",\n            model:app.jobInfoMetricModel\n        }).render();\n    });\n    app.server.on(\"cluster.quiesce\",function(message){\n        app.isQuiesced = Boolean(message.quiesced);\n        if(app.isQuiesced){\n            alertify.message(\"Cluster has been quiesced by \"+message.username);\n        }\n        else{\n            alertify.message(\"Cluster has been reactivatd by \"+message.username);\n        }\n        app.checkQuiesced();\n    });\n    window.app=app;\n    window.DataTable=DataTable;\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/js/main.js\n ** module id = 0\n ** module chunks = 0\n **/"],"sourceRoot":""}