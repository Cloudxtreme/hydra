
spawn:
    spawn.defaultReplicaCount: 0
    spawnbalance.min.disk.percent.avail.newtasks: .01
    spawnbalance.min.disk.percent.avail.runtasks: .01
    cluster.name: "${CLUSTER_NAME}"
    batch.brokerHost: ${RABBIT_MQ_HOST}
    batch.brokerPort: ${RABBIT_MQ_PORT}
    com.addthis.hydra.query.web.QueryServer.webPort: ${QUERY_WEB_PORT}
    com.addthis.hydra.job.spawn.Spawn.queryMasterAppName: ${QUERY_MASTER_APP_NAME}
    com.addthis.hydra.job.spawn.Spawn.queryMasterAppPortIndex: ${QUERY_MASTER_APP_PORT_INDEX}
    com.sun.management.jmxremote.authenticate: False
    com.sun.management.jmxremote.port: 8503
    com.sun.management.jmxremote.ssl: False
    com.yammer.metrics.GcMonitor.enable: False
    io.netty.allocator.normalCacheSize: 32
    io.netty.allocator.smallCacheSize: 32
    io.netty.allocator.tinyCacheSize: 32
    jar: "${HYDRA_ROOT}/jar/hydra.jar"
    java.net.preferIPv4Stack: True
    java.rmi.server.hostname: ${HOST}
    job.store.remote: False
    log4j.configurationFactory: "com.addthis.hydra.uber.HoconConfigurationFactory"
    logging.stderr: "off"
    mapper.tree.type: 1
    mesh.port: ${MESH_PORT}
    metrics.reporter.config: "${HYDRA_CONF}/metrics-reporter-config.yaml"
    org.jboss.logging.provider: "slf4j"
    source.mesh.path.token.offset: 2
    spawn.auth.ldap: False
    spawn.background.notification.address: "${HYDRA_EMAIL}"
    spawn.background.threads: 10
    spawn.background.timeout: 600000
    spawn.localhost: ${HOST}
    spawn.queryhost: ${QUERY_HOST}
    spawn.rsync: 1
    spawnbalance.max.job.task.replicas.per.host: 5
    task.migration.enable: False
    Xloggc: ":${HYDRA_LOG}/gc/$name.gc"
    Xms: "64M"
    Xmx: "64M"
    XXGCLogFileSize: "1M"
    XXHeapDumpOnOutOfMemoryError: True
    XXNumberOfGCLogFiles: 10
    XXOnOutOfMemoryError: "'kill -9 %p'"
    XXPrintGCDateStamps: True
    XXPrintGCDetails: True
    XXPrintReferenceGC: True
    XXUseCompressedOops: True
    XXUseGCLogFileRotation: True
    zk.servers: "${ZK_SERVERS}"    
    zk.chroot: "${ZK_CHROOT}"
    mesos.proxy: "${MESOS_PROXY}"
    mesos.marathonURL: "${MARATHON_URL}"
    mesos.useMesos: "${USE_MESOS}"
mesh:
    com.sun.management.jmxremote.authenticate: False
    com.sun.management.jmxremote.port: 8502
    com.sun.management.jmxremote.ssl: False
    com.yammer.metrics.GcMonitor.enable: False
    io.netty.allocator.normalCacheSize: 32
    io.netty.allocator.smallCacheSize: 32
    io.netty.allocator.tinyCacheSize: 32
    jar: "${HYDRA_ROOT}/jar/hydra.jar"
    java.net.preferIPv4Stack: True
    java.rmi.server.hostname: ${HOST}
    log4j.configurationFactory: "com.addthis.hydra.uber.HoconConfigurationFactory"
    logging.stderr: "off"
    meshy.autoMesh: True
    meshy.autoMeshTimeout: 5000
    meshy.buffers.max: 32
    meshy.buffers.slowdown: 1
    meshy.complete.timeout: 600
    meshy.file.dirCacheSize: 0
    meshy.finder.safety.drop: 2000
    meshy.finder.threads: 4
    meshy.peer.local: False
    meshy.send.buffer: 16
    meshy.senders: 3
    metrics.reporter.config: "${HYDRA_CONF}/metrics-reporter-config.yaml"
    mss.mesh.ports: ${MESH_PORT}
    mss.root: "${HYDRA_ROOT}/streams"
    muxy.cache.file.max: 500000
    org.jboss.logging.provider: "slf4j"
    Xms: "256M"
    Xmx: "256M"
    XXHeapDumpOnOutOfMemoryError: True
    XXNewRatio: 4
    XXOnOutOfMemoryError: "'kill -9 %p'"
    XXSurvivorRatio: 4
    XXUseCompressedOops: True
mqmaster:
    cluster.name: "${CLUSTER_NAME}"
    batch.brokerHost: ${RABBIT_MQ_HOST}
    batch.brokerPort: ${RABBIT_MQ_PORT}
    com.sun.management.jmxremote.authenticate: False
    com.sun.management.jmxremote.port: 8500
    com.sun.management.jmxremote.ssl: False
    com.yammer.metrics.GcMonitor.enable: False
    hydra.query.tasks.max: 10
    hydra.query.tasks.softmax: 6
    hydra.tree.data.map: True
    io.netty.allocator.normalCacheSize: 32
    io.netty.allocator.smallCacheSize: 32
    io.netty.allocator.tinyCacheSize: 32
    jar: "${HYDRA_ROOT}/jar/hydra.jar"
    java.net.preferIPv4Stack: True
    java.rmi.server.hostname: ${HOST}
    log4j.configurationFactory: "com.addthis.hydra.uber.HoconConfigurationFactory"
    logging.stderr: "off"
    mapper.tree.type: 1
    meshSourceAggregator.enableStragglerCheck: True
    meshSourceAggregator.frameReader.threads: 128
    meshSourceAggregator.stragglerCheckHostPercentage: 0.2
    meshSourceAggregator.stragglerCheckMeanRuntimeFactor: 1.3
    meshSourceAggregator.stragglerCheckPeriodMillis: 10
    meshy.autoMesh: True
    meshy.autoMeshTimeout: 5000
    meshy.channel.report.sources: 5000
    meshy.peer.local: True
    meshy.stream.prefetch: True
    metrics.reporter.config: "${HYDRA_CONF}/metrics-reporter-config.yaml"
    nativeURLCodec: 0
    org.jboss.logging.provider: "slf4j"
    qmaster.accesslog.compress: 1
    qmaster.localhost: ${HOST}
    qmaster.log.accessLogDir: "${HYDRA_LOG}/qmaster/access"
    qmaster.log.dir: "${HYDRA_LOG}/qmaster"
    qmaster.maxQueryTime: 180000
    qmaster.mesh.port: ${QUERY_MESH_PORT}
    qmaster.mesh.peer.port: ${QUERY_MESH_PEER_PORT}
    qmaster.mesh.root: "${HYDRA_ROOT}/streams"
    qmaster.query.port: ${QUERY_API_PORT}
    qmaster.web.dir: "${HYDRA_ROOT}/web"
    qmaster.web.port: ${QUERY_WEB_PORT}
    query.tipmem: "100M"
    query.tiprow: "50k"
    query.tmpdir: "${HYDRA_ROOT}/tmp/mqmaster"
    sun.io.useCanonCaches: False
    sun.io.useCanonPrefixCache: False
    Xloggc: ":${HYDRA_LOG}/gc/$name.gc"
    Xms: "512M"
    Xmx: "512M"
    XXGCLogFileSize: "1M"
    XXHeapDumpOnOutOfMemoryError: True
    XXMaxDirectMemorySize: "256M"
    XXMaxGCPauseMillis: "50"
    XXNumberOfGCLogFiles: 10
    XXOnOutOfMemoryError: "'kill -9 %p'"
    XXPrintGCDateStamps: True
    XXPrintGCDetails: True
    XXPrintReferenceGC: True
    XXUseCompressedOops: True
    XXUseG1GC: True
    XXUseGCLogFileRotation: True
    zk.servers: "${ZK_SERVERS}"
    zk.chroot: "${ZK_CHROOT}"
    mesos.proxy: "${MESOS_PROXY}"
    mesos.marathonURL: "${MARATHON_URL}"
    qmaster.useMesos: "${USE_MESOS}"
    qmaster.mesh.peer.interval: 15
minion:
    cluster.name: "${CLUSTER_NAME}"
    batch.brokerHost: ${RABBIT_MQ_HOST}
    batch.brokerPort: ${RABBIT_MQ_PORT}
    com.sun.management.jmxremote.authenticate: False
    com.sun.management.jmxremote.port: 7501
    com.sun.management.jmxremote.ssl: False
    com.yammer.metrics.GcMonitor.enable: False
    io.netty.allocator.normalCacheSize: 32
    io.netty.allocator.smallCacheSize: 32
    io.netty.allocator.tinyCacheSize: 32
    jar: "${HYDRA_ROOT}/jar/hydra.jar"
    java.net.preferIPv4Stack: True
    java.rmi.server.hostname: ${HOST}
    log4j.configurationFactory: "com.addthis.hydra.uber.HoconConfigurationFactory"
    logging.stderr: "off"
    mapper.tree.type: 1
    metrics.reporter.config: "${HYDRA_CONF}/metrics-reporter-config.yaml"
    minion.localhost: ${HOST}
    minion.max.active.tasks: 3
    minion.sparse.updates: 1
    minion.type: "default"
    minion.web.port: "${MINION_WEB_PORT}"
    org.jboss.logging.provider: "slf4j"
    sun.io.useCanonCaches: False
    sun.io.useCanonPrefixCache: False
    Xms: "64M"
    Xmx: "64M"
    XXHeapDumpOnOutOfMemoryError: True
    XXOnOutOfMemoryError: "'kill -9 %p'"
    XXUseCompressedOops: True
    zk.servers: "${ZK_SERVERS}"
    zk.chroot: "${ZK_CHROOT}"
    mesos.proxy: "${MESOS_PROXY}"
    mesos.marathonURL: "${MARATHON_URL}"
    mesos.useMesos: "${USE_MESOS}"
    minion.localhost: ${MINION_HOST}
mqworker:
    com.sun.management.jmxremote.authenticate: False
    com.sun.management.jmxremote.port: 8501
    com.sun.management.jmxremote.ssl: False
    com.yammer.metrics.GcMonitor.enable: False
    cs.je.cacheShared: True
    cs.je.cacheSize: "512M"
    hydra.tree.cache.pageCacheSize: 250
    hydra.tree.data.map: True
    io.netty.allocator.normalCacheSize: 32
    io.netty.allocator.smallCacheSize: 32
    io.netty.allocator.tinyCacheSize: 32
    jar: "${HYDRA_ROOT}/jar/hydra.jar"
    java.net.preferIPv4Stack: True
    java.rmi.server.hostname: ${HOST}
    je.evictor.nodesPerScan: 100
    log4j.configurationFactory: "com.addthis.hydra.uber.HoconConfigurationFactory"
    logging.stderr: "off"
    mesh.local.handlers: "com.addthis.hydra.data.query.source.MeshQuerySource"
    meshQuerySource.outputQueueSize: 5000
    meshQuerySource.queueAttemptLimit: 100
    meshQuerySource.searchThreads: 8
    meshy.autoMesh: True
    meshy.autoMeshTimeout: 5000
    meshy.buffers.enable: True
    meshy.buffers.max: 32
    meshy.buffers.slowdown: 1
    meshy.file.dirCacheSize: 0
    meshy.senders: 8
    meshy.stream.maxopen: 10000
    metrics.reporter.config: "${HYDRA_CONF}/metrics-reporter-config.yaml"
    org.jboss.logging.provider: "slf4j"
    query.tipmem: "50M"
    query.tiprow: "10k"
    query.tmpdir: "${HYDRA_ROOT}/tmp/mqworker"
    queryEngineCache.engineCacheSize: 100
    qworker.log.dir: "${HYDRA_LOG}/qworker"
    sun.io.useCanonCaches: False
    sun.io.useCanonPrefixCache: False
    Xms: "512M"
    Xmx: "512M"
    XXHeapDumpOnOutOfMemoryError: True
    XXMaxDirectMemorySize: "128M"
    XXMaxGCPauseMillis: "50"
    XXOnOutOfMemoryError: "'kill -9 %p'"
    XXUseCompressedOops: True
    XXUseG1GC: True
    qmaster.mesh.port: ${QUERY_MESH_PORT}
    qmaster.mesh.peer.port: ${QUERY_MESH_PEER_PORT}
    qmaster.mesh.root : "${HYDRA_ROOT}/streams"
task-generic:
    batch.brokerAddresses: "localhost"
    batch.job.log4j: 1
    cluster.name: "${CLUSTER_NAME}"
    com.sun.management.jmxremote.authenticate: False
    com.sun.management.jmxremote.ssl: False
    com.yammer.metrics.GcMonitor.enable: False
    cs.je.cacheShared: 1
    cs.je.cacheSize: "256M"
    cs.je.deferredWrite: 1
    dataSourceMeshy2.buffer: 256
    dataSourceMeshy2.pollCountdown: 0
    dataSourceMeshy2.pollInterval: 3000
    dataSourceMeshy2.workers: 3
    eps.mem.debug: 0
    ganglia.enable: False
    hydra.markdb.error.ignore: True
    hydra.tree.cache.maxMem: "500M"
    hydra.tree.cache.maxSize: 0
    hydra.tree.cleanqmax: 100
    hydra.tree.db: 2
    hydra.tree.mem.sample: 40
    hydra.tree.page.maxMem: "100K"
    hydra.tree.page.maxSize: 250
    hydra.tree.trash.interval: 1000
    hydra.tree.trash.maxtime: 100
    io.netty.allocator.normalCacheSize: 32
    io.netty.allocator.smallCacheSize: 32
    io.netty.allocator.tinyCacheSize: 32
    jar: "/opt/hydra/jar/hydra.jar"
    jar.isAgent: True
    java.net.preferIPv4Stack: True
    java.rmi.server.hostname: "`hostname | cut -d . -f 1`"
    je.cleaner.minUtilization: 90
    je.cleaner.threads: 1
    je.evictor.lruOnly: True
    je.evictor.nodesPerScan: 100
    je.log.fileMax: 100000000
    log4j.configurationFactory: "com.addthis.hydra.uber.HoconConfigurationFactory"
    log4j.defaultInitOverride: False
    mapper.localhost: "`hostname | cut -d . -f 1`"
    mapper.tree.type: 0
    meshy.complete.timeout: 600
    meshy.stream.buffer: 10
    metrics.reporter.config: "/opt/hydra/conf/metrics-reporter-config.yaml"
    muxy.cache.bytes.max: 157286400
    muxy.cache.dir.max: 5
    muxy.default.block.size: 100
    muxy.write.thrashold: 2000
    nativeURLCodec: 0
    org.jboss.logging.provider: "slf4j"
    source.mesh.port: ${MESH_PORT}
    streamserver.read.timeout: 300000
    task.exit: 1
    task.threads: 2
    trak.event.debug: 1
    Xmn: "356M"
    Xms: "1G"
    Xmx: "2G"
    XXOnOutOfMemoryError: "'kill -9 %p'"
    XXUseCompressedOops: True
    zk.servers: "${ZK_SERVERS}"
    zk.chroot: "${ZK_CHROOT}"